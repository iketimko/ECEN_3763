
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module IT_LAB_12(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK
);


//=======================================================
//  REG/WIRE declarations
//=======================================================
// For Platform Designer block
logic pll_locked, AD_clk;

// For clock Gate
logic [3:0] state;
logic shift_rst;
logic gated_AD_clk;
assign ADC_SCLK = gated_AD_clk;

// For Binary to BCD module
logic [11:0] binary_in;
logic [15:0] bcd_out;

//For reset Module
logic reset_n;

// For the 7 segment Display
assign HEX4 = 7'b1111111;
assign HEX5 = 7'b1111111;

//=======================================================
//  Structural coding
//=======================================================
PD_L12 u0 (
	.clk_clk             (CLOCK_50),             //           clk.clk
	.reset_reset_n       (1'b1),       //         reset.reset_n
	.pll_0_locked_export (pll_locked), //  pll_0_locked.export
	.pll_0_outclk0_clk   (AD_clk)    // pll_0_outclk0.clk
);

ADC_controller u1 (
	.ADC_clk(AD_clk),
	.SDO	(ADC_DOUT),
	.SDI 	(ADC_DIN),
	.CONVST (ADC_CONVST),
	.binval	(binary_in),
	.switch	(SW[2:0]),
	.reset	(~reset_n),
	.state,
	.gated_clk(gated_AD_clk),
	.shift_rst

);

clk_gate u2 (
	.clk_in		(AD_clk),
	.state, 
	.clk_out	(gated_AD_clk),
	.shift_rst
);

bin2bcd u3 (
	.binary_in,
	.bcd_out
);

segment7 u4 (
	.bcd	(bcd_out[3:0]), 
	.seg	(HEX0)
);

segment7 u5 (
	.bcd	(bcd_out[7:4]), 
	.seg	(HEX1)
);

segment7 u6 (
	.bcd	(bcd_out[11:8]), 
	.seg	(HEX2)
);

segment7 u7 (
	.bcd	(bcd_out[15:12]), 
	.seg	(HEX3)
);

reset u8 (
	.clock			(CLOCK_50), 
	.ext_reset_n	(KEY[0]), 
	.pll_locked, 
	.reset_n
);

endmodule
